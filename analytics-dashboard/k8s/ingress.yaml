# Ingress Configuration for Analytics Dashboard
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: analytics-dashboard-ingress
  namespace: analytics-dashboard
  labels:
    app: analytics-dashboard
    component: ingress
  annotations:
    # NGINX Ingress Controller annotations
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    
    # CORS
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization,x-user-id"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Frame-Options DENY;
      add_header X-Content-Type-Options nosniff;
      add_header X-XSS-Protection "1; mode=block";
      add_header Referrer-Policy "strict-origin-when-cross-origin";
      add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https:; connect-src 'self' wss: ws:;";
    
    # Load balancing
    nginx.ingress.kubernetes.io/load-balance: "round_robin"
    nginx.ingress.kubernetes.io/upstream-hash-by: "$remote_addr"
    
    # Timeouts
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "5"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "30"
    
    # Body size limits
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    
    # Compression
    nginx.ingress.kubernetes.io/enable-compression: "true"
    
    # WebSocket support
    nginx.ingress.kubernetes.io/websocket-services: "analytics-api-service"
    
    # Circuit breaker
    nginx.ingress.kubernetes.io/upstream-fail-timeout: "10s"
    nginx.ingress.kubernetes.io/upstream-max-fails: "3"
    
    # Cert Manager (if using)
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    
spec:
  tls:
  - hosts:
    - analytics.etsypro.ai
    - api.analytics.etsypro.ai
    - ml.analytics.etsypro.ai
    secretName: analytics-dashboard-tls
  
  rules:
  # Main frontend application
  - host: analytics.etsypro.ai
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend-service
            port:
              number: 80
  
  # Backend API
  - host: api.analytics.etsypro.ai
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: analytics-api-service
            port:
              number: 80
  
  # ML Service API
  - host: ml.analytics.etsypro.ai
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: ml-service
            port:
              number: 80

---
# Ingress for staging environment
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: analytics-dashboard-staging-ingress
  namespace: analytics-dashboard
  labels:
    app: analytics-dashboard
    component: ingress
    environment: staging
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/auth-basic: "Authentication Required"
    nginx.ingress.kubernetes.io/auth-secret: staging-auth
    nginx.ingress.kubernetes.io/auth-realm: "Staging Environment"
    cert-manager.io/cluster-issuer: "letsencrypt-staging"
spec:
  tls:
  - hosts:
    - staging.analytics.etsypro.ai
    - staging-api.analytics.etsypro.ai
    - staging-ml.analytics.etsypro.ai
    secretName: analytics-dashboard-staging-tls
  
  rules:
  # Staging frontend
  - host: staging.analytics.etsypro.ai
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend-service
            port:
              number: 80
  
  # Staging API
  - host: staging-api.analytics.etsypro.ai
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: analytics-api-service
            port:
              number: 80
  
  # Staging ML Service
  - host: staging-ml.analytics.etsypro.ai
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: ml-service
            port:
              number: 80

---
# Network Policy for ingress traffic
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ingress-network-policy
  namespace: analytics-dashboard
  labels:
    app: analytics-dashboard
    component: network-policy
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 8001
    - protocol: TCP
      port: 3000
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 3000  # Prometheus scraping
    - protocol: TCP
      port: 8001  # ML service metrics