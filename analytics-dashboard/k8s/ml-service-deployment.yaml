# ML Service Deployment Configuration
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ml-service
  namespace: analytics-dashboard
  labels:
    app: ml-service
    component: ml
    version: v1
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: ml-service
      component: ml
  template:
    metadata:
      labels:
        app: ml-service
        component: ml
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8001"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: ml-service
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: ml-service
        image: etsypro/ml-service:v1.0.0
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8001
          protocol: TCP
        env:
        - name: PYTHONPATH
          value: "/app"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: postgres-url
        - name: FEATURE_STORE_URL
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: timescale-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: redis-credentials
              key: url
        - name: MODEL_STORAGE_PATH
          value: "/app/models"
        - name: SENTRY_DSN
          valueFrom:
            secretKeyRef:
              name: monitoring-credentials
              key: sentry-dsn
              optional: true
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
            nvidia.com/gpu: 0
          limits:
            memory: "2Gi"
            cpu: "2"
            nvidia.com/gpu: 1
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        volumeMounts:
        - name: model-storage
          mountPath: /app/models
          readOnly: false
        - name: tmp
          mountPath: /tmp
          readOnly: false
        - name: ml-logs
          mountPath: /app/logs
          readOnly: false
      volumes:
      - name: model-storage
        persistentVolumeClaim:
          claimName: ml-models-pvc
      - name: tmp
        emptyDir: {}
      - name: ml-logs
        emptyDir: {}
      nodeSelector:
        kubernetes.io/arch: amd64
        node-type: compute-optimized
      tolerations:
      - key: "nvidia.com/gpu"
        operator: "Exists"
        effect: "NoSchedule"
      - key: "node-type"
        operator: "Equal"
        value: "compute-optimized"
        effect: "NoSchedule"

---
apiVersion: v1
kind: Service
metadata:
  name: ml-service
  namespace: analytics-dashboard
  labels:
    app: ml-service
    component: ml
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8001"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  selector:
    app: ml-service
    component: ml

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: ml-service-hpa
  namespace: analytics-dashboard
  labels:
    app: ml-service
    component: ml
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ml-service
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 60
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 70
  - type: Pods
    pods:
      metric:
        name: ml_service_requests_per_second
      target:
        type: AverageValue
        averageValue: "50"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 600  # 10 minutes for ML workloads
      policies:
      - type: Percent
        value: 5
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 120  # 2 minutes
      policies:
      - type: Percent
        value: 25
        periodSeconds: 60

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ml-service
  namespace: analytics-dashboard
  labels:
    app: ml-service
    component: ml

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: ml-service-pdb
  namespace: analytics-dashboard
  labels:
    app: ml-service
    component: ml
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: ml-service
      component: ml

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ml-models-pvc
  namespace: analytics-dashboard
  labels:
    app: ml-service
    component: storage
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 50Gi
  storageClassName: fast-ssd