# Analytics Dashboard - Docker Compose Configuration
# Complete development environment with all services

version: '3.8'

services:
  # ===================
  # DATABASES
  # ===================
  
  # PostgreSQL for configuration data
  postgres:
    image: postgres:15-alpine
    container_name: analytics-postgres
    environment:
      POSTGRES_DB: analytics
      POSTGRES_USER: analytics_user
      POSTGRES_PASSWORD: analytics_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - analytics-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U analytics_user -d analytics"]
      interval: 10s
      timeout: 5s
      retries: 5

  # TimescaleDB for time-series data
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: analytics-timescale
    environment:
      POSTGRES_DB: timescale_analytics
      POSTGRES_USER: timescale_user
      POSTGRES_PASSWORD: timescale_password
    volumes:
      - timescale_data:/var/lib/postgresql/data
      - ./infrastructure/sql/timescale-init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"
    networks:
      - analytics-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U timescale_user -d timescale_analytics"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: analytics-redis
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - analytics-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ===================
  # MESSAGE STREAMING
  # ===================
  
  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: analytics-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - analytics-network

  # Apache Kafka
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: analytics-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - analytics-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka Schema Registry
  schema-registry:
    image: confluentinc/cp-schema-registry:7.4.0
    container_name: analytics-schema-registry
    depends_on:
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - analytics-network

  # ===================
  # SEARCH & ANALYTICS
  # ===================
  
  # Elasticsearch for search and analytics
  elasticsearch:
    image: elasticsearch:8.8.0
    container_name: analytics-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - analytics-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===================
  # APPLICATION SERVICES
  # ===================
  
  # Backend Analytics API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: analytics-backend
    environment:
      NODE_ENV: development
      PORT: 3000
      DATABASE_URL: postgresql://analytics_user:analytics_password@postgres:5432/analytics
      TIMESCALE_URL: postgresql://timescale_user:timescale_password@timescaledb:5432/timescale_analytics
      REDIS_URL: redis://:redis_password@redis:6379
      KAFKA_BROKERS: kafka:9092
      JWT_SECRET: development_jwt_secret_key
      CORS_ORIGIN: http://localhost:3001
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./shared:/app/shared
    ports:
      - "3000:3000"
    networks:
      - analytics-network
    depends_on:
      postgres:
        condition: service_healthy
      timescaledb:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    command: npm run start:dev
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ML Inference Service
  ml-service:
    build:
      context: ./ml-service
      dockerfile: Dockerfile
      target: development
    container_name: analytics-ml-service
    environment:
      PYTHONPATH: /app
      DATABASE_URL: postgresql://analytics_user:analytics_password@postgres:5432/analytics
      FEATURE_STORE_URL: postgresql://timescale_user:timescale_password@timescaledb:5432/timescale_analytics
      REDIS_URL: redis://:redis_password@redis:6379
      MODEL_STORAGE_PATH: /app/models
      DEBUG: 1
    volumes:
      - ./ml-service:/app
      - ml_models:/app/models
    ports:
      - "8001:8001"
    networks:
      - analytics-network
    depends_on:
      postgres:
        condition: service_healthy
      timescaledb:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn main:app --host 0.0.0.0 --port 8001 --reload
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: analytics-frontend
    environment:
      REACT_APP_API_URL: http://localhost:3000
      REACT_APP_WS_URL: ws://localhost:3000
      REACT_APP_ML_API_URL: http://localhost:8001
      GENERATE_SOURCEMAP: false
      FAST_REFRESH: true
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - ./shared:/app/shared
    ports:
      - "3001:3001"
    networks:
      - analytics-network
    depends_on:
      - backend
      - ml-service
    command: npm start
    stdin_open: true
    tty: true

  # ===================
  # MONITORING & OBSERVABILITY
  # ===================
  
  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: analytics-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - analytics-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:10.0.0
    container_name: analytics-grafana
    ports:
      - "3003:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_SECURITY_ADMIN_USER: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/grafana/provisioning:/etc/grafana/provisioning
      - ./infrastructure/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - analytics-network
    depends_on:
      - prometheus

  # ===================
  # DEVELOPMENT TOOLS
  # ===================
  
  # Kafka UI for development
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: analytics-kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8081
    networks:
      - analytics-network
    depends_on:
      - kafka
      - schema-registry

  # Redis Insight for development
  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: analytics-redis-insight
    ports:
      - "8082:8001"
    volumes:
      - redis_insight_data:/db
    networks:
      - analytics-network
    depends_on:
      - redis

  # Elasticsearch Head for development
  elasticsearch-head:
    image: mobz/elasticsearch-head:5
    container_name: analytics-elasticsearch-head
    ports:
      - "9100:9100"
    networks:
      - analytics-network
    depends_on:
      - elasticsearch

# ===================
# NETWORKS
# ===================
networks:
  analytics-network:
    driver: bridge
    name: analytics-network

# ===================
# VOLUMES
# ===================
volumes:
  postgres_data:
    driver: local
  timescale_data:
    driver: local
  redis_data:
    driver: local
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
  kafka_data:
    driver: local
  elasticsearch_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  redis_insight_data:
    driver: local
  ml_models:
    driver: local